// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcmvp/iam.go/ent/account"
	"github.com/kcmvp/iam.go/ent/oauth"
)

// OAuth is the model entity for the OAuth schema.
type OAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	CreateBy string `json:"create_by,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	UpdateBy string `json:"update_by,omitempty"`
	// OauthType holds the value of the "oauth_type" field.
	OauthType int `json:"oauth_type,omitempty"`
	// OpenID holds the value of the "open_id" field.
	OpenID string `json:"open_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthQuery when eager-loading is set.
	Edges         OAuthEdges `json:"edges"`
	account_oauth *int
}

// OAuthEdges holds the relations/edges for other nodes in the graph.
type OAuthEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauth.FieldID, oauth.FieldOauthType:
			values[i] = new(sql.NullInt64)
		case oauth.FieldCreateBy, oauth.FieldUpdateBy, oauth.FieldOpenID:
			values[i] = new(sql.NullString)
		case oauth.FieldCreateTime, oauth.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case oauth.ForeignKeys[0]: // account_oauth
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuth fields.
func (o *OAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case oauth.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case oauth.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case oauth.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				o.CreateBy = value.String
			}
		case oauth.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				o.UpdateBy = value.String
			}
		case oauth.FieldOauthType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_type", values[i])
			} else if value.Valid {
				o.OauthType = int(value.Int64)
			}
		case oauth.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				o.OpenID = value.String
			}
		case oauth.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_oauth", value)
			} else if value.Valid {
				o.account_oauth = new(int)
				*o.account_oauth = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the OAuth entity.
func (o *OAuth) QueryAccount() *AccountQuery {
	return (&OAuthClient{config: o.config}).QueryAccount(o)
}

// Update returns a builder for updating this OAuth.
// Note that you need to call OAuth.Unwrap() before calling this method if this OAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OAuth) Update() *OAuthUpdateOne {
	return (&OAuthClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the OAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *OAuth) Unwrap() *OAuth {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuth is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OAuth) String() string {
	var builder strings.Builder
	builder.WriteString("OAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", create_by=")
	builder.WriteString(o.CreateBy)
	builder.WriteString(", update_by=")
	builder.WriteString(o.UpdateBy)
	builder.WriteString(", oauth_type=")
	builder.WriteString(fmt.Sprintf("%v", o.OauthType))
	builder.WriteString(", open_id=")
	builder.WriteString(o.OpenID)
	builder.WriteByte(')')
	return builder.String()
}

// OAuths is a parsable slice of OAuth.
type OAuths []*OAuth

func (o OAuths) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
