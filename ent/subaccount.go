// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcmvp/idm/ent/schema"
	"github.com/kcmvp/idm/ent/subaccount"
)

// SubAccount is the model entity for the SubAccount schema.
type SubAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	CreateBy string `json:"create_by,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	UpdateBy string `json:"update_by,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// AcctType holds the value of the "acct_type" field.
	AcctType schema.AcctType `json:"acct_type,omitempty"`
	// SubAcct holds the value of the "sub_acct" field.
	SubAcct string `json:"sub_acct,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubAccountQuery when eager-loading is set.
	Edges SubAccountEdges `json:"edges"`
}

// SubAccountEdges holds the relations/edges for other nodes in the graph.
type SubAccountEdges struct {
	// Accoun holds the value of the accoun edge.
	Accoun []*Account `json:"accoun,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccounOrErr returns the Accoun value or an error if the edge
// was not loaded in eager-loading.
func (e SubAccountEdges) AccounOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accoun, nil
	}
	return nil, &NotLoadedError{edge: "accoun"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subaccount.FieldDeleted:
			values[i] = new(sql.NullBool)
		case subaccount.FieldID, subaccount.FieldAcctType:
			values[i] = new(sql.NullInt64)
		case subaccount.FieldCreateBy, subaccount.FieldUpdateBy, subaccount.FieldSubAcct:
			values[i] = new(sql.NullString)
		case subaccount.FieldCreateTime, subaccount.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubAccount fields.
func (sa *SubAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int(value.Int64)
		case subaccount.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sa.CreateTime = value.Time
			}
		case subaccount.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sa.UpdateTime = value.Time
			}
		case subaccount.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				sa.CreateBy = value.String
			}
		case subaccount.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				sa.UpdateBy = value.String
			}
		case subaccount.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				sa.Deleted = value.Bool
			}
		case subaccount.FieldAcctType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field acct_type", values[i])
			} else if value.Valid {
				sa.AcctType = schema.AcctType(value.Int64)
			}
		case subaccount.FieldSubAcct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_acct", values[i])
			} else if value.Valid {
				sa.SubAcct = value.String
			}
		}
	}
	return nil
}

// QueryAccoun queries the "accoun" edge of the SubAccount entity.
func (sa *SubAccount) QueryAccoun() *AccountQuery {
	return (&SubAccountClient{config: sa.config}).QueryAccoun(sa)
}

// Update returns a builder for updating this SubAccount.
// Note that you need to call SubAccount.Unwrap() before calling this method if this SubAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SubAccount) Update() *SubAccountUpdateOne {
	return (&SubAccountClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the SubAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SubAccount) Unwrap() *SubAccount {
	tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubAccount is not a transactional entity")
	}
	sa.config.driver = tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SubAccount) String() string {
	var builder strings.Builder
	builder.WriteString("SubAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", sa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", create_by=")
	builder.WriteString(sa.CreateBy)
	builder.WriteString(", update_by=")
	builder.WriteString(sa.UpdateBy)
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", sa.Deleted))
	builder.WriteString(", acct_type=")
	builder.WriteString(fmt.Sprintf("%v", sa.AcctType))
	builder.WriteString(", sub_acct=")
	builder.WriteString(sa.SubAcct)
	builder.WriteByte(')')
	return builder.String()
}

// SubAccounts is a parsable slice of SubAccount.
type SubAccounts []*SubAccount

func (sa SubAccounts) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
