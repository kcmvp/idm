// Code generated by entc, DO NOT EDIT.

package subaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kcmvp/iam.go/ent/predicate"
	"github.com/kcmvp/iam.go/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// AcctType applies equality check predicate on the "acct_type" field. It's identical to AcctTypeEQ.
func AcctType(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAcctType), vc))
	})
}

// SubAcct applies equality check predicate on the "sub_acct" field. It's identical to SubAcctEQ.
func SubAcct(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubAcct), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// CreateByContains applies the Contains predicate on the "create_by" field.
func CreateByContains(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreateBy), v))
	})
}

// CreateByHasPrefix applies the HasPrefix predicate on the "create_by" field.
func CreateByHasPrefix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreateBy), v))
	})
}

// CreateByHasSuffix applies the HasSuffix predicate on the "create_by" field.
func CreateByHasSuffix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreateBy), v))
	})
}

// CreateByEqualFold applies the EqualFold predicate on the "create_by" field.
func CreateByEqualFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreateBy), v))
	})
}

// CreateByContainsFold applies the ContainsFold predicate on the "create_by" field.
func CreateByContainsFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByContains applies the Contains predicate on the "update_by" field.
func UpdateByContains(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdateBy), v))
	})
}

// UpdateByHasPrefix applies the HasPrefix predicate on the "update_by" field.
func UpdateByHasPrefix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdateBy), v))
	})
}

// UpdateByHasSuffix applies the HasSuffix predicate on the "update_by" field.
func UpdateByHasSuffix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdateBy), v))
	})
}

// UpdateByEqualFold applies the EqualFold predicate on the "update_by" field.
func UpdateByEqualFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdateBy), v))
	})
}

// UpdateByContainsFold applies the ContainsFold predicate on the "update_by" field.
func UpdateByContainsFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdateBy), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// AcctTypeEQ applies the EQ predicate on the "acct_type" field.
func AcctTypeEQ(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAcctType), vc))
	})
}

// AcctTypeNEQ applies the NEQ predicate on the "acct_type" field.
func AcctTypeNEQ(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAcctType), vc))
	})
}

// AcctTypeIn applies the In predicate on the "acct_type" field.
func AcctTypeIn(vs ...schema.AcctType) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAcctType), v...))
	})
}

// AcctTypeNotIn applies the NotIn predicate on the "acct_type" field.
func AcctTypeNotIn(vs ...schema.AcctType) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAcctType), v...))
	})
}

// AcctTypeGT applies the GT predicate on the "acct_type" field.
func AcctTypeGT(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAcctType), vc))
	})
}

// AcctTypeGTE applies the GTE predicate on the "acct_type" field.
func AcctTypeGTE(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAcctType), vc))
	})
}

// AcctTypeLT applies the LT predicate on the "acct_type" field.
func AcctTypeLT(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAcctType), vc))
	})
}

// AcctTypeLTE applies the LTE predicate on the "acct_type" field.
func AcctTypeLTE(v schema.AcctType) predicate.SubAccount {
	vc := int(v)
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAcctType), vc))
	})
}

// SubAcctEQ applies the EQ predicate on the "sub_acct" field.
func SubAcctEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubAcct), v))
	})
}

// SubAcctNEQ applies the NEQ predicate on the "sub_acct" field.
func SubAcctNEQ(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubAcct), v))
	})
}

// SubAcctIn applies the In predicate on the "sub_acct" field.
func SubAcctIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubAcct), v...))
	})
}

// SubAcctNotIn applies the NotIn predicate on the "sub_acct" field.
func SubAcctNotIn(vs ...string) predicate.SubAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubAcct), v...))
	})
}

// SubAcctGT applies the GT predicate on the "sub_acct" field.
func SubAcctGT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubAcct), v))
	})
}

// SubAcctGTE applies the GTE predicate on the "sub_acct" field.
func SubAcctGTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubAcct), v))
	})
}

// SubAcctLT applies the LT predicate on the "sub_acct" field.
func SubAcctLT(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubAcct), v))
	})
}

// SubAcctLTE applies the LTE predicate on the "sub_acct" field.
func SubAcctLTE(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubAcct), v))
	})
}

// SubAcctContains applies the Contains predicate on the "sub_acct" field.
func SubAcctContains(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubAcct), v))
	})
}

// SubAcctHasPrefix applies the HasPrefix predicate on the "sub_acct" field.
func SubAcctHasPrefix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubAcct), v))
	})
}

// SubAcctHasSuffix applies the HasSuffix predicate on the "sub_acct" field.
func SubAcctHasSuffix(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubAcct), v))
	})
}

// SubAcctEqualFold applies the EqualFold predicate on the "sub_acct" field.
func SubAcctEqualFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubAcct), v))
	})
}

// SubAcctContainsFold applies the ContainsFold predicate on the "sub_acct" field.
func SubAcctContainsFold(v string) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubAcct), v))
	})
}

// HasAccoun applies the HasEdge predicate on the "accoun" edge.
func HasAccoun() predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccounTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AccounTable, AccounPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccounWith applies the HasEdge predicate on the "accoun" edge with a given conditions (other predicates).
func HasAccounWith(preds ...predicate.Account) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccounInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AccounTable, AccounPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubAccount) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubAccount) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubAccount) predicate.SubAccount {
	return predicate.SubAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
