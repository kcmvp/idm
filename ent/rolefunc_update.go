// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcmvp/iam.go/ent/predicate"
	"github.com/kcmvp/iam.go/ent/role"
	"github.com/kcmvp/iam.go/ent/rolefunc"
)

// RoleFuncUpdate is the builder for updating RoleFunc entities.
type RoleFuncUpdate struct {
	config
	hooks    []Hook
	mutation *RoleFuncMutation
}

// Where appends a list predicates to the RoleFuncUpdate builder.
func (rfu *RoleFuncUpdate) Where(ps ...predicate.RoleFunc) *RoleFuncUpdate {
	rfu.mutation.Where(ps...)
	return rfu
}

// SetUpdateTime sets the "update_time" field.
func (rfu *RoleFuncUpdate) SetUpdateTime(t time.Time) *RoleFuncUpdate {
	rfu.mutation.SetUpdateTime(t)
	return rfu
}

// SetUpdateBy sets the "update_by" field.
func (rfu *RoleFuncUpdate) SetUpdateBy(s string) *RoleFuncUpdate {
	rfu.mutation.SetUpdateBy(s)
	return rfu
}

// SetDeleted sets the "deleted" field.
func (rfu *RoleFuncUpdate) SetDeleted(b bool) *RoleFuncUpdate {
	rfu.mutation.SetDeleted(b)
	return rfu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (rfu *RoleFuncUpdate) SetNillableDeleted(b *bool) *RoleFuncUpdate {
	if b != nil {
		rfu.SetDeleted(*b)
	}
	return rfu
}

// SetURLPattern sets the "url_pattern" field.
func (rfu *RoleFuncUpdate) SetURLPattern(s string) *RoleFuncUpdate {
	rfu.mutation.SetURLPattern(s)
	return rfu
}

// AddRoleIDs adds the "role" edge to the Role entity by IDs.
func (rfu *RoleFuncUpdate) AddRoleIDs(ids ...int) *RoleFuncUpdate {
	rfu.mutation.AddRoleIDs(ids...)
	return rfu
}

// AddRole adds the "role" edges to the Role entity.
func (rfu *RoleFuncUpdate) AddRole(r ...*Role) *RoleFuncUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfu.AddRoleIDs(ids...)
}

// Mutation returns the RoleFuncMutation object of the builder.
func (rfu *RoleFuncUpdate) Mutation() *RoleFuncMutation {
	return rfu.mutation
}

// ClearRole clears all "role" edges to the Role entity.
func (rfu *RoleFuncUpdate) ClearRole() *RoleFuncUpdate {
	rfu.mutation.ClearRole()
	return rfu
}

// RemoveRoleIDs removes the "role" edge to Role entities by IDs.
func (rfu *RoleFuncUpdate) RemoveRoleIDs(ids ...int) *RoleFuncUpdate {
	rfu.mutation.RemoveRoleIDs(ids...)
	return rfu
}

// RemoveRole removes "role" edges to Role entities.
func (rfu *RoleFuncUpdate) RemoveRole(r ...*Role) *RoleFuncUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfu *RoleFuncUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rfu.defaults()
	if len(rfu.hooks) == 0 {
		if err = rfu.check(); err != nil {
			return 0, err
		}
		affected, err = rfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleFuncMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfu.check(); err != nil {
				return 0, err
			}
			rfu.mutation = mutation
			affected, err = rfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rfu.hooks) - 1; i >= 0; i-- {
			if rfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfu *RoleFuncUpdate) SaveX(ctx context.Context) int {
	affected, err := rfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfu *RoleFuncUpdate) Exec(ctx context.Context) error {
	_, err := rfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfu *RoleFuncUpdate) ExecX(ctx context.Context) {
	if err := rfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfu *RoleFuncUpdate) defaults() {
	if _, ok := rfu.mutation.UpdateTime(); !ok {
		v := rolefunc.UpdateDefaultUpdateTime()
		rfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfu *RoleFuncUpdate) check() error {
	if v, ok := rfu.mutation.URLPattern(); ok {
		if err := rolefunc.URLPatternValidator(v); err != nil {
			return &ValidationError{Name: "url_pattern", err: fmt.Errorf(`ent: validator failed for field "RoleFunc.url_pattern": %w`, err)}
		}
	}
	return nil
}

func (rfu *RoleFuncUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolefunc.Table,
			Columns: rolefunc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolefunc.FieldID,
			},
		},
	}
	if ps := rfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolefunc.FieldUpdateTime,
		})
	}
	if value, ok := rfu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolefunc.FieldUpdateBy,
		})
	}
	if value, ok := rfu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rolefunc.FieldDeleted,
		})
	}
	if value, ok := rfu.mutation.URLPattern(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolefunc.FieldURLPattern,
		})
	}
	if rfu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.RemovedRoleIDs(); len(nodes) > 0 && !rfu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolefunc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RoleFuncUpdateOne is the builder for updating a single RoleFunc entity.
type RoleFuncUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleFuncMutation
}

// SetUpdateTime sets the "update_time" field.
func (rfuo *RoleFuncUpdateOne) SetUpdateTime(t time.Time) *RoleFuncUpdateOne {
	rfuo.mutation.SetUpdateTime(t)
	return rfuo
}

// SetUpdateBy sets the "update_by" field.
func (rfuo *RoleFuncUpdateOne) SetUpdateBy(s string) *RoleFuncUpdateOne {
	rfuo.mutation.SetUpdateBy(s)
	return rfuo
}

// SetDeleted sets the "deleted" field.
func (rfuo *RoleFuncUpdateOne) SetDeleted(b bool) *RoleFuncUpdateOne {
	rfuo.mutation.SetDeleted(b)
	return rfuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (rfuo *RoleFuncUpdateOne) SetNillableDeleted(b *bool) *RoleFuncUpdateOne {
	if b != nil {
		rfuo.SetDeleted(*b)
	}
	return rfuo
}

// SetURLPattern sets the "url_pattern" field.
func (rfuo *RoleFuncUpdateOne) SetURLPattern(s string) *RoleFuncUpdateOne {
	rfuo.mutation.SetURLPattern(s)
	return rfuo
}

// AddRoleIDs adds the "role" edge to the Role entity by IDs.
func (rfuo *RoleFuncUpdateOne) AddRoleIDs(ids ...int) *RoleFuncUpdateOne {
	rfuo.mutation.AddRoleIDs(ids...)
	return rfuo
}

// AddRole adds the "role" edges to the Role entity.
func (rfuo *RoleFuncUpdateOne) AddRole(r ...*Role) *RoleFuncUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfuo.AddRoleIDs(ids...)
}

// Mutation returns the RoleFuncMutation object of the builder.
func (rfuo *RoleFuncUpdateOne) Mutation() *RoleFuncMutation {
	return rfuo.mutation
}

// ClearRole clears all "role" edges to the Role entity.
func (rfuo *RoleFuncUpdateOne) ClearRole() *RoleFuncUpdateOne {
	rfuo.mutation.ClearRole()
	return rfuo
}

// RemoveRoleIDs removes the "role" edge to Role entities by IDs.
func (rfuo *RoleFuncUpdateOne) RemoveRoleIDs(ids ...int) *RoleFuncUpdateOne {
	rfuo.mutation.RemoveRoleIDs(ids...)
	return rfuo
}

// RemoveRole removes "role" edges to Role entities.
func (rfuo *RoleFuncUpdateOne) RemoveRole(r ...*Role) *RoleFuncUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rfuo.RemoveRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuo *RoleFuncUpdateOne) Select(field string, fields ...string) *RoleFuncUpdateOne {
	rfuo.fields = append([]string{field}, fields...)
	return rfuo
}

// Save executes the query and returns the updated RoleFunc entity.
func (rfuo *RoleFuncUpdateOne) Save(ctx context.Context) (*RoleFunc, error) {
	var (
		err  error
		node *RoleFunc
	)
	rfuo.defaults()
	if len(rfuo.hooks) == 0 {
		if err = rfuo.check(); err != nil {
			return nil, err
		}
		node, err = rfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleFuncMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfuo.check(); err != nil {
				return nil, err
			}
			rfuo.mutation = mutation
			node, err = rfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfuo.hooks) - 1; i >= 0; i-- {
			if rfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuo *RoleFuncUpdateOne) SaveX(ctx context.Context) *RoleFunc {
	node, err := rfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuo *RoleFuncUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuo *RoleFuncUpdateOne) ExecX(ctx context.Context) {
	if err := rfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfuo *RoleFuncUpdateOne) defaults() {
	if _, ok := rfuo.mutation.UpdateTime(); !ok {
		v := rolefunc.UpdateDefaultUpdateTime()
		rfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfuo *RoleFuncUpdateOne) check() error {
	if v, ok := rfuo.mutation.URLPattern(); ok {
		if err := rolefunc.URLPatternValidator(v); err != nil {
			return &ValidationError{Name: "url_pattern", err: fmt.Errorf(`ent: validator failed for field "RoleFunc.url_pattern": %w`, err)}
		}
	}
	return nil
}

func (rfuo *RoleFuncUpdateOne) sqlSave(ctx context.Context) (_node *RoleFunc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rolefunc.Table,
			Columns: rolefunc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rolefunc.FieldID,
			},
		},
	}
	id, ok := rfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleFunc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolefunc.FieldID)
		for _, f := range fields {
			if !rolefunc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolefunc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rolefunc.FieldUpdateTime,
		})
	}
	if value, ok := rfuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolefunc.FieldUpdateBy,
		})
	}
	if value, ok := rfuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rolefunc.FieldDeleted,
		})
	}
	if value, ok := rfuo.mutation.URLPattern(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rolefunc.FieldURLPattern,
		})
	}
	if rfuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.RemovedRoleIDs(); len(nodes) > 0 && !rfuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rolefunc.RoleTable,
			Columns: rolefunc.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoleFunc{config: rfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolefunc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
