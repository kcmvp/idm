// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcmvp/idm.go/ent/rolefunc"
)

// RoleFunc is the model entity for the RoleFunc schema.
type RoleFunc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	CreateBy string `json:"create_by,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	UpdateBy string `json:"update_by,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// URLPattern holds the value of the "url_pattern" field.
	URLPattern string `json:"url_pattern,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleFuncQuery when eager-loading is set.
	Edges RoleFuncEdges `json:"edges"`
}

// RoleFuncEdges holds the relations/edges for other nodes in the graph.
type RoleFuncEdges struct {
	// Role holds the value of the role edge.
	Role []*Role `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e RoleFuncEdges) RoleOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleFunc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolefunc.FieldDeleted:
			values[i] = new(sql.NullBool)
		case rolefunc.FieldID:
			values[i] = new(sql.NullInt64)
		case rolefunc.FieldCreateBy, rolefunc.FieldUpdateBy, rolefunc.FieldURLPattern:
			values[i] = new(sql.NullString)
		case rolefunc.FieldCreateTime, rolefunc.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RoleFunc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleFunc fields.
func (rf *RoleFunc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolefunc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rf.ID = int(value.Int64)
		case rolefunc.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rf.CreateTime = value.Time
			}
		case rolefunc.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				rf.UpdateTime = value.Time
			}
		case rolefunc.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				rf.CreateBy = value.String
			}
		case rolefunc.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				rf.UpdateBy = value.String
			}
		case rolefunc.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				rf.Deleted = value.Bool
			}
		case rolefunc.FieldURLPattern:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_pattern", values[i])
			} else if value.Valid {
				rf.URLPattern = value.String
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the RoleFunc entity.
func (rf *RoleFunc) QueryRole() *RoleQuery {
	return (&RoleFuncClient{config: rf.config}).QueryRole(rf)
}

// Update returns a builder for updating this RoleFunc.
// Note that you need to call RoleFunc.Unwrap() before calling this method if this RoleFunc
// was returned from a transaction, and the transaction was committed or rolled back.
func (rf *RoleFunc) Update() *RoleFuncUpdateOne {
	return (&RoleFuncClient{config: rf.config}).UpdateOne(rf)
}

// Unwrap unwraps the RoleFunc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rf *RoleFunc) Unwrap() *RoleFunc {
	tx, ok := rf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleFunc is not a transactional entity")
	}
	rf.config.driver = tx.drv
	return rf
}

// String implements the fmt.Stringer.
func (rf *RoleFunc) String() string {
	var builder strings.Builder
	builder.WriteString("RoleFunc(")
	builder.WriteString(fmt.Sprintf("id=%v", rf.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(rf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(rf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", create_by=")
	builder.WriteString(rf.CreateBy)
	builder.WriteString(", update_by=")
	builder.WriteString(rf.UpdateBy)
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", rf.Deleted))
	builder.WriteString(", url_pattern=")
	builder.WriteString(rf.URLPattern)
	builder.WriteByte(')')
	return builder.String()
}

// RoleFuncs is a parsable slice of RoleFunc.
type RoleFuncs []*RoleFunc

func (rf RoleFuncs) config(cfg config) {
	for _i := range rf {
		rf[_i].config = cfg
	}
}
